
         UDP-OR protocol version 2

                 Camilo Viecco



This document contains the onion protocol for UDP-OR

This is the documentation for protocol version 2.0

MOTIVATION:

Tor currently uses TCP connections to transfer data between participants
in the network. This causes significant delays when the system is under
network congestion. Thus we propose transmitting all data, including or
control messages, via UDP (and unreliable best effor protocol) and providing
packet reordering and reliaility done in a per stream basis.

As the transport mechanism for TDOR is inherently unreliable. The onion 
routing protocol, that is the commands issued between peers in the Tdor 
system, must be aware of this. Also,each cell header must be self contained, 
in the sense that it must be able to be decrypted and verified independently 
once a circuit has been established.


PARAMETERS:

All fields are in network byte order.
For ephemeral keys we use use a 512 bit Diffie-Hellman key excange with the
following parameters (expressed as c strings):

CV-> change to 1024 DH key

        static unsigned char dh512_p[]={
                0xFF,0x61,0x71,0x3C,0x3E,0xA5,0x52,0x0B,0x49,0x20,0xCB,0x7A,
                0x0D,0xF9,0x7E,0xF1,0x0F,0x2D,0xA3,0x72,0x21,0xAF,0xF8,0xBE,
                0xBD,0x1D,0x8D,0xD4,0x78,0x5C,0x4D,0x4E,0x7D,0x11,0xC6,0x81,
                0x17,0x54,0x6B,0x9D,0xC2,0xB4,0x32,0xD4,0x56,0x78,0x94,0xDA,
                0xB0,0x1D,0x82,0xE6,0xF9,0xF1,0x88,0x1A,0x6B,0xEE,0x0A,0x76,
                0x25,0x22,0x72,0xC3,
                };
        static unsigned char dh512_g[]={
                0x05,
                };

The public keys are 2048 bit RSA keys. The preferred exponent is RSA_F4.
The symmetric key algorithm is AES with 128 bit key size. When
encrypting more than 128 bytes, the system uses AES in CBC mode with an
explicit initialization vector.
The cryptographic hash algorithm is SHA1.

For link encrption, we use Camilo Viecco's crappy link encryption (CVCLE)
or DTLS.


SECURITY GOALS:

At the onion protocol level, the protol MUST provide confidentiality, integrity
and authentication between the sender of an onion cell and the final receiver 
of such cell. The data transfer must provide confidentiality between two nodes
in the same circuit. The system MUST also provide forward secrecy for the 
data sent.  

Assumptions: The lower level transport mechanism provides confidentiality,
integrity and authentication in a point-to-point maner. The lower level
aslo detects and discards duplicate packets. 


PERFOMANCE GOALS:





UDP-OR CELL FORMAT:

Each Tdor Cell has a 24 byte header as follows:
                                    
    0                   1                   2                   3   
    0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 
   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
   |Version| Size  |             Circuit id                        |
   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
   |      TTL      |    Dropped    |         Reserved              |
   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
   |                       Sequence Number                         |
   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
   |                       Sequence Number  (cont)                 |
   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
   |                    Checksum                                   |
   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
   |                    Checksum (cont)            |Command|Status |
   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
   |                        Cell Payload                           |
   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+

                            Cell Header Format

          Note that one tick mark represents one bit position.

                               Figure 1.

Version:
   4 bits.
   The current version of the protocol this MUST be 2.

Size:
   4 bits:
   The total size of the Cell, in 128 byte blocks. The total size
   for cells is at maximum 1024 bytes.  Thus the value of this field
   MUST be between 1 and 8 inclusive. Systems using this protocol
   SHOULD use only two cell sizes: sizes 128 and 1024.

Circuit_id:
    24 bits.
    A unique identifier for a circuit in the path. 

TTL:
    8 bits
    Number of hops passed. Decreased by one per hop. Cells should be discarded
    once the ttl reaches value of 0.    

Reserved:
   16 bits.
   Currently blank field for aligment of the symmetric algorithm.

Sequence Number:
   64 bits.
   Sequence Number for the circuit. It is also used to generate the 
   initialization vector for the contents for the opaque sections of the
   cell, including checksum, command and command status. It MUST be increased
   by one per each packet sent per  circuit. 

Checksum:
   56 bits.
   The first 56 bits of the SHA1 data of the unencrypted payload of the cell.
   It is opaque after session is estblished, as from this field on, the
   cell is encrypted.

Command:
   4 bits: 
   The command type of the circuit. It must be one of the following types:
      COMMAND_PADDING       0
      COMMAND_CONNECT       1
      COMMAND_CREATE        2
      COMMAND_RELAY_COMMAND 3
      COMMAND_DESTROY       4
      COMMAND_STREAM_DATA   5 

Command Status	
   4 bits:
   The command status for the type of message sent. It must be one of the
   followind status.
      STATUS_REQUEST        0
      STATUS_OK             1
      STATUS_ACK            2
      STATUS_LATER          3
      STATUS_DENIED         4
   


DECRYPTING AND ENCRYPTING TDOR CELLS:

Once a session is established each end-point of the system has one shared
secret in the form on a DH session key (DHSK). This DHSK is then converted to 
a primary shared key(PSK) by taking the SHA1 digest of the DHSK. The PSK is 
then used to generate two encryption keys by doing an AES encyption of the 
values 0 and 1 with the AES key being the first 128 bits of the PSK. The 
encryption of 0 will be used as the initialization vector key (IVK) and the 
encryption of 1 will be used as the payload PAK. 

   PSK=SHA1(DHSK)
   IVK=AES(PSK,0)
   PAK=AES(PSK,1)

The motivation of the SHA1 operation is to collapse all the entropy of the DHSK
into a smaller number of bits. The need of different KEYS for the IV and the 
payload comes from the need to generate a secret IV from a public sequence 
number. (If the IV was public as in version 1 or predictible, it is possible for 
an attacker to determine if a particular message has been sent in the past 
if the attacker can control what is sent.)
 
CV -> where does can it be refefenced that this method of generating
      derived keys is secure? is [1] still valid?


To encrypt a cell, the sender calculates the next sequence number SEQ of the 
cell in the circuit by increasint the current sequence number by one. This new 
sequence number is places in the sequence number field in the cell to be sent. 
Next the sender encypts this value with IVK (prepads the sequence number with 
zeros), IV then is AES(IVK,SEQ). The sender then encypts the payload with AES 
in CBC mode as: AES_CBC_(IV,PAK,PADDED(payload)).

At the reciever end, the reciever first checks if the SEQ recieved is inside
the appropiate receive window and if the message is not repeated. If the
SEQ is valid then the process of decryption is reversed. Calculating IV
and then using that IV to decrypt the padded payload. 


SECURITY ANALYSIS:

 

TDOR CIRCUITS:

Tdor circuits can have multiple layers of encryption. Cells are 'detected' 
(for processing by the system) when for an existing forwarding circuit the 
checksum in the packet matches the calculation of the decrypted packet.
//
Since we are using 56 bits for this checksum, the probability of
accepting an invalid packet, is 1/2^56 which is about 1e-17 per packet.



Creating a  circuit:

To connect to a server a client connects using to the server in the appropiate 
port. After this this client MUST send a command connect cell message (a cell 
where the Command is set to  with 
status request. This cell payload MUST have a dh_hello struct defined as 
follow:

    0                   1                   2                   3
    0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1
   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
   |       Key Size                |        Encrypted Len          |
   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
   | Extra type    | Extra len     |         Pub Key               |
   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
   |                        Pub key (...)                          |
   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+

                            Dh Hello struct 

key size:
   16 bit
   The actual Diffie hellman publik key size key_size. MUST be less
   than 256 bytes.

Encrypted len:
   16 bit
   The encrypted size of the dh public key section that is encrypted with
   the server public rsa key.

extra type: the type of the extra parameter encoded.

extra_len
   the size of an extra parameter
       

Pub key:
   256 bytes	
   This field contains the dh key send




Tdor STREAMS:



ACKNOWLEDGEMENTS:

Nick Mathewson, 
Steve Myers, 

REFERENCES

[1] Michel Adballa and Mihir Bellare. Increasing the Lifetime of a Key: A 
    Comparative Analysis of the Security of Re-Keying Techniques. 2000. 


APPENDIX 1, PROBABLITY OF INCORRECT MESSAGE DETECTION

Assuming that an attacker inserts an
